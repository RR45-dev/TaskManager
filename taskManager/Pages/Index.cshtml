@page
@model taskManager.Pages.IndexModel
@{
    ViewData["Title"] = "Task Manager";
}




<h2>Task List</h2>

<div class="search-container">
    <input type="text" id="searchBox" placeholder="Search tasks..." autocomplete="off">
    <div id="results" class="dropdown-box"></div>
</div>



<table id="myTable1" border="1" cellpadding="10">
    <thead>
        <tr>
            <th>Title</th>
            <th>Description</th>
            <th>Due Date</th>
            <th>Status</th>
            <th>Priority</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var task in Model.TaskTable)
        {
            <tr data-task-id= selectedItem>
                <td>
                    <span class="text">@task.Title</span>
                    <input type="text" class="edit-input" value="@task.Title" hidden>
                </td>

                <td>
                    <span class="text">@task.Description</span>
                    <input type="text" class="edit-input" value="@task.Description" hidden>
                </td>

                <td>
                    <span class="text">@task.DueDate.ToShortDateString()</span>
                    <input type="date" class="edit-input" value="@task.DueDate.ToString("yyyy-MM-dd")" hidden>
                </td>

                <td>
                    <span class="text">@(task.IsCompleted ? "Completed" : "Pending")</span>
                    <select class="edit-input" hidden>
                        <option value="false" selected="@(!task.IsCompleted)">Pending</option>
                        <option value="true" selected="@(task.IsCompleted)">Completed</option>
                    </select>
                </td>

                <td>
                    <span class="text">@task.Priority</span>
                    <select class="edit-input" hidden>
                        <option value="Low" selected="@(task.Priority == "Low")">Low</option>
                        <option value="Medium" selected="@(task.Priority == "Medium")">Medium</option>
                        <option value="High" selected="@(task.Priority == "High")">High</option>
                    </select>
                </td>

                <td>
                    <button class="edit-btn" onclick="enableEdit(this)">Edit</button>
                    <button class="save-btn" onclick="saveTask(this)" hidden>Save</button>
                </td>
            </tr>
        }
    </tbody>
</table>


<table id="myTable2"  border="1" cellpadding="10">
    <thead>
        <tr>
            <th>Title</th>
            <th>Description</th>
            <th>Due Date</th>
            <th>Status</th>
            <th>Priority</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var task in Model.TaskTable)
        {
            <tr data-task-id="@task.Id">
                <td>
                    <span class="text">@task.Title</span>
                    <input type="text" class="edit-input" value="@task.Title" hidden>
                </td>

                <td>
                    <span class="text">@task.Description</span>
                    <input type="text" class="edit-input" value="@task.Description" hidden>
                </td>

                <td>
                    <span class="text">@task.DueDate.ToShortDateString()</span>
                    <input type="date" class="edit-input" value="@task.DueDate.ToString("yyyy-MM-dd")" hidden>
                </td>

                <td>
                    <span class="text">@(task.IsCompleted ? "Completed" : "Pending")</span>
                    <select class="edit-input" hidden>
                        <option value="false" selected="@(!task.IsCompleted)">Pending</option>
                        <option value="true" selected="@(task.IsCompleted)">Completed</option>
                    </select>
                </td>

                <td>
                    <span class="text">@task.Priority</span>
                    <select class="edit-input" hidden>
                        <option value="Low" selected="@(task.Priority == "Low")">Low</option>
                        <option value="Medium" selected="@(task.Priority == "Medium")">Medium</option>
                        <option value="High" selected="@(task.Priority == "High")">High</option>
                    </select>
                </td>

                <td>
                    <button class="edit-btn" onclick="enableEdit(this)">Edit</button>
                    <button class="save-btn" onclick="saveTask(this)" hidden>Save</button>
                </td> 
            </tr>
        }
    </tbody>
</table>



<h2>Today's Task List</h2>

<table border="1" cellpadding="10">
    <thead>
        <tr>
            <th>Title</th>
            <th>Description</th>
            <th>Due Date</th>
            <th>Status</th>
            <th>Priority</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var task in Model.TodaysTaskTable)
        {
            <tr>
                <td><span class="text">@task.Title</span></td>
                <td><span class="text">@task.Description</span></td>
                <td><span class="text">@task.DueDate.ToShortDateString()</span></td>
                <td><span class="text">@(task.IsCompleted ? "Completed" : "Pending")</span></td>
                <td><span class="text">@task.Priority</span></td>
            </tr>
        }
    </tbody>
</table>






<script>


        

function enableEdit(button) {
    let row = button.closest("tr");

    
    row.querySelectorAll(".text").forEach(span => span.hidden = true);
    row.querySelectorAll(".edit-input").forEach(input => input.hidden = false);

    
    row.querySelector(".edit-btn").hidden = true;
    row.querySelector(".save-btn").hidden = false;
}

async function saveTask(button) {
    let row = button.closest("tr");
    let taskId = row.getAttribute("data-task-id");

    let updatedTask = {
        id: taskId,
        title: row.cells[0].querySelector("input").value,
        description: row.cells[1].querySelector("input").value,
        dueDate: row.cells[2].querySelector("input").value,
        isCompleted: row.cells[3].querySelector("select").value === "true",
        priority: row.cells[4].querySelector("select").value
    };

    let response = await fetch(`/api/tasks/${taskId}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(updatedTask)
    });

    if (response.ok) {
        // Update UI
        row.cells[0].querySelector(".text").innerText = updatedTask.title;
        row.cells[1].querySelector(".text").innerText = updatedTask.description;
        row.cells[2].querySelector(".text").innerText = new Date(updatedTask.dueDate).toLocaleDateString();
        row.cells[3].querySelector(".text").innerText = updatedTask.isCompleted ? "Completed" : "Pending";
        row.cells[4].querySelector(".text").innerText = updatedTask.priority;

        // Hide input fields, show text spans
        row.querySelectorAll(".text").forEach(span => span.hidden = false);
        row.querySelectorAll(".edit-input").forEach(input => input.hidden = true);

        // Show "Edit" button, hide "Save" button
        row.querySelector(".edit-btn").hidden = false;
        row.querySelector(".save-btn").hidden = true;
    } else {
        alert("Error saving task!");
    }

  
}

   



   

</script>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        $("#myTable2").hide();
         let selectedItem = "";


        $("#searchBox").on("keyup", function () {
            var query = $(this).val();
            if (query.length > 0) {
                $.get("/Index?handler=Search&term=" + query)
                    .done(function (data) {
                        $("#results").empty().show(); // Show dropdown
                        $.each(data, function (i, item) {
                            $("#results").append(`<div class="result-item">${item}</div>`);
                        });

                        // Make results clickable
                        $(".result-item").on("click", function () {
                            $("#myTable1").hide();
                            $("#myTable2").show();
                            selectedItem = $(this).text();
                            console.log("Selected item:", selectedItem); // Debugging output
                            $("#searchBox").val($(this).text());
                            $("#results").hide(); // Hide results after selection
                        });
                    })
                    .fail(function (xhr, status, error) {
                        console.error("Error fetching data:", status, error);
                    });
            } else {
                $("#results").hide();
            }
        });

        // Hide dropdown if clicked outside
        $(document).on("click", function (e) {
            if (!$(e.target).closest(".search-container").length) {
                $("#results").hide();
            }
        });
    });
</script>


<style>
    table {
        max-width: 1000px; /* Adjust to your desired width */
        width: 100%; /* Ensures it doesn't exceed the max width */
        border-collapse: collapse;
        table-layout: auto; /* Allows columns to adjust to content size */
    }

    th, td {
        padding: 8px;
        text-align: left;
        white-space: normal; /* Allows text to wrap instead of overlapping */
        word-wrap: break-word; /* Ensures words break properly */
        overflow: hidden;
    }

    th {
        background-color: #f4f4f4;
    }

    td input,
    td select {
        width: 100%; /* Makes input/select fully fit inside the cell */
        box-sizing: border-box; /* Prevents them from exceeding the cell size */
    }

    button {
        padding: 5px 10px;
        font-size: 14px;
    }

    .search-container {
        position: relative;
        width: 300px;
    }

    #searchBox {
        width: 100%;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .dropdown-box {
        position: absolute;
        top: 100%;
        left: 0;
        width: 100%;
        background: white;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        display: none; /* Initially hidden */
        z-index: 10;
    }

    .result-item {
        padding: 10px;
        cursor: pointer;
        border-bottom: 1px solid #eee;
    }

        .result-item:hover {
            background-color: #f0f0f0;
        }
</style>

